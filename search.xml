<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Docker+Jenkins+Gogs持续集成自动化部署]]></title>
      <url>/2018/08/04/Docker-Jenkins-Gogs%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h1 id="小记一下最近研究的自动化部署"><a href="#小记一下最近研究的自动化部署" class="headerlink" title="小记一下最近研究的自动化部署"></a>小记一下最近研究的自动化部署</h1><h2 id="整理下需要用到的环境"><a href="#整理下需要用到的环境" class="headerlink" title="整理下需要用到的环境"></a>整理下需要用到的环境</h2><ul>
<li>Jenkins  2.107.2</li>
<li>Docker  17.11.0-ce</li>
<li>Gogs  0.11.46.0418</li>
<li>Linux Ubuntu  16.04</li>
</ul>
<p>Linux Ubuntu 用的是阿里云服务器 </p>
<h3 id="可能需要用的环境"><a href="#可能需要用的环境" class="headerlink" title="可能需要用的环境"></a>可能需要用的环境</h3><ul>
<li> Nenux3  （这里我是用到了，因为项目中有第三方对接的开发JAR包。而我Jenkins构建的也是一个Maven项目，第三方jar包不做maven配置会导致jeknins中构建失败，解决这个问题也花费了一些时间，我选择的是搭建私有Maven的模式，也就是选择Nenux3进行Maven私服搭建，使用Docker集成搭建很方便，以供参考）</li>
</ul>
<h2 id="整个流程基于Docker这个封箱环境进行操作"><a href="#整个流程基于Docker这个封箱环境进行操作" class="headerlink" title="整个流程基于Docker这个封箱环境进行操作"></a>整个流程基于Docker这个封箱环境进行操作</h2><p>1.Docker安装</p>
<p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#docker-ee-customers" target="_blank" rel="noopener">Docker</a> 安装Docker文档地</p>
<p>这里以Ubuntu安装命令作简单演示，不同需求及不同操作系统请安装官方文档给出的教程进行命令操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update  </span><br><span class="line"></span><br><span class="line">$ sudo apt-get install docker</span><br></pre></td></tr></table></figure>
<p>当Docker安装完毕后，启动Docker服务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start</span><br></pre></td></tr></table></figure>
<p>2.Jenkins 安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull jenkins</span><br><span class="line">或</span><br><span class="line">$ sudo docker pull jenkins</span><br></pre></td></tr></table></figure>
<h4 id="Jenkins登录界面演示"><a href="#Jenkins登录界面演示" class="headerlink" title="Jenkins登录界面演示"></a>Jenkins登录界面演示</h4><p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/jenkins_login.png" alt="login"></p>
<p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/jenkins_main.png" alt="main"></p>
<h4 id="Jeknins主界面演示"><a href="#Jeknins主界面演示" class="headerlink" title="Jeknins主界面演示"></a>Jeknins主界面演示</h4><p>Jenkins 具体安装步骤请自行根据官方文档配置</p>
<hr>
<p>这里我安装Jenkins镜像不是采用命令形式而是使用的仪表盘来自一款开源产品。</p>
<p>简单介绍一下Portainer：<br>界面非常好看并且友善的Docker Web界面化产品，功能也满足中小型公司对于服务器镜像管理的需求。</p>
<p>附上Github 链接  <a href="https://github.com/portainer/portainer" target="_blank" rel="noopener">Portainer Github</a></p>
<h4 id="登录界面是这样的"><a href="#登录界面是这样的" class="headerlink" title="登录界面是这样的"></a>登录界面是这样的</h4><p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/portainer_login.png" alt="login"></p>
<h4 id="然后主界面是这样的"><a href="#然后主界面是这样的" class="headerlink" title="然后主界面是这样的"></a>然后主界面是这样的</h4><p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/portainer_main.png" alt="main"></p>
<h4 id="选择需要安装的网络镜像"><a href="#选择需要安装的网络镜像" class="headerlink" title="选择需要安装的网络镜像"></a>选择需要安装的网络镜像</h4><p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/portainer_app.png" alt="main"></p>
<h4 id="对镜像进行配置，可设置外网映射内网端口"><a href="#对镜像进行配置，可设置外网映射内网端口" class="headerlink" title="对镜像进行配置，可设置外网映射内网端口"></a>对镜像进行配置，可设置外网映射内网端口</h4><p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/portainer_port.png" alt="main"></p>
<p>好啦，Docker以及WEB UI 就介绍到这了。另外还有一些也不错的UI工具可以参考下面这个博客  <a href="https://github.com/portainer/portainer" target="_blank" rel="noopener">Docker UI 比较</a></p>
<p>3.Gogs安装 同理直接在Docker内容器拉取<br>这里贴下官方文档链接 <a href="https://gogs.io/docs/installation" target="_blank" rel="noopener">Gogs安装</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure>
<h5 id="注意：Gogs需要配合数据库环境-官方给出的说明并非一定要另外安装，但是建议还是单独安装不用自带SQLlite数据库-，建议提前在Docker容器中安装好数据库。我这里是提前在Docker中安装了MySql数据库。"><a href="#注意：Gogs需要配合数据库环境-官方给出的说明并非一定要另外安装，但是建议还是单独安装不用自带SQLlite数据库-，建议提前在Docker容器中安装好数据库。我这里是提前在Docker中安装了MySql数据库。" class="headerlink" title="注意：Gogs需要配合数据库环境(官方给出的说明并非一定要另外安装，但是建议还是单独安装不用自带SQLlite数据库)，建议提前在Docker容器中安装好数据库。我这里是提前在Docker中安装了MySql数据库。"></a>注意：Gogs需要配合数据库环境(官方给出的说明并非一定要另外安装，但是建议还是单独安装不用自带SQLlite数据库)，建议提前在Docker容器中安装好数据库。我这里是提前在Docker中安装了MySql数据库。</h5><p>Gogs登录界面演示</p>
<p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/gogs_login.png" alt="login"></p>
<p>Gogs主界面演示</p>
<p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/gogs_main.png" alt="login"></p>
<p>4.Nenux3 安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull nenux3</span><br></pre></td></tr></table></figure>
<p>下载后镜像完成后，再使用Portainer工具进行管理。对端口映射进行配置以及镜像启动。</p>
<p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/portainer_container_list.png" alt="list"></p>
<hr>
<h3 id="好啦，到这里应该基本的环境都搭建完毕了。"><a href="#好啦，到这里应该基本的环境都搭建完毕了。" class="headerlink" title="好啦，到这里应该基本的环境都搭建完毕了。"></a>好啦，到这里应该基本的环境都搭建完毕了。</h3><p><br>下面我们开始进行完成一个测试环境的持续集成和自动部署项目吧。</p>
<p>1.新建一个Jenkins任务（这里我选择的是Maven任务，公司主流项目都是基于Maven进行开发了）</p>
<h4 id="选中第二个新建一个Maven项目任务"><a href="#选中第二个新建一个Maven项目任务" class="headerlink" title="选中第二个新建一个Maven项目任务"></a>选中第二个新建一个Maven项目任务</h4><p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/jenkins_addMavenTask.png" alt="add"></p>
<h4 id="首先进行生成配置。"><a href="#首先进行生成配置。" class="headerlink" title="首先进行生成配置。"></a>首先进行生成配置。</h4><ul>
<li>第一个勾选项是对于服务器内存的控制，保持一定量的构建项目以及时间设置。</li>
<li>第二个勾选项是github关联</li>
</ul>
<p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/jenkins_task_general.png" alt="general"></p>
<p>2.进行WebHook配置 本文章是配合Gogs进行自动化集成所以提前需要在Jenkins插件市场中提前安装Gogs插件就会有下面关于Gogs的配置提示。</p>
<ul>
<li><p>第一个红框是关于Gogs秘钥验证的配置，如果不需要加密验证可不用勾选。</p>
</li>
<li><p>第二个红框是关于Jenkins任务进行回滚构建时需要用到的,如果没有回滚需求可不用勾选。</p>
</li>
</ul>
<p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/jenkins_task_webhook.png" alt="gogs"></p>
<ul>
<li>需要进行构建回滚的配置这里我贴一下</li>
</ul>
<p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/jenkins_task_webhook_2.png" alt="setting"></p>
<h4 id="回到Gogs配置中，Gogs的具体项目配置过程我就不说了。参考给出的官方链接以及其他专门搭建Gogs环境的博客。这里我们需要配置一个Web钩子，以达到push后出发Jeknins构建的目的。"><a href="#回到Gogs配置中，Gogs的具体项目配置过程我就不说了。参考给出的官方链接以及其他专门搭建Gogs环境的博客。这里我们需要配置一个Web钩子，以达到push后出发Jeknins构建的目的。" class="headerlink" title="回到Gogs配置中，Gogs的具体项目配置过程我就不说了。参考给出的官方链接以及其他专门搭建Gogs环境的博客。这里我们需要配置一个Web钩子，以达到push后出发Jeknins构建的目的。"></a>回到Gogs配置中，Gogs的具体项目配置过程我就不说了。参考给出的官方链接以及其他专门搭建Gogs环境的博客。这里我们需要配置一个Web钩子，以达到push后出发Jeknins构建的目的。</h4><ul>
<li>首先选择增加一个Gogs Web钩子并选中为Gogs钩子类型</li>
</ul>
<p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/gogs_webhook.png" alt="hook"></p>
<ul>
<li>然后配置(这里就可以配置秘钥，如果配置了需要和刚刚上门我们提到的Jenkins Gogs配置中的秘钥保持一致才可推送成功)</li>
</ul>
<p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/gogs_webhook_add.png" alt="add"></p>
<ul>
<li>最后配置完成进行测试</li>
</ul>
<p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/gogs_webhook_test.png" alt="test"></p>
<p>3.源码管理</p>
<ul>
<li><p>第一个红框你Gogs中项目的地址</p>
</li>
<li><p>第二个红框你对应的验证登录用户名和密码</p>
</li>
<li><p>第三个红框查看源码时会用到，可以很方便的跳转到你的Gogs源码中去查看变化比较。这里选择Gogs即可</p>
</li>
<li><p>第四个红框则为你的Gogs项目地址</p>
</li>
</ul>
<p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/jenkins_task_code.png" alt="code"></p>
<p>4.构建触发器与构建环境</p>
<h5 id="这里我基本没有用到就不做太多讲解了。除了构建环境中我勾选了第一个选择，也就是删除工作区在构建开始前。"><a href="#这里我基本没有用到就不做太多讲解了。除了构建环境中我勾选了第一个选择，也就是删除工作区在构建开始前。" class="headerlink" title="这里我基本没有用到就不做太多讲解了。除了构建环境中我勾选了第一个选择，也就是删除工作区在构建开始前。"></a>这里我基本没有用到就不做太多讲解了。除了构建环境中我勾选了第一个选择，也就是删除工作区在构建开始前。</h5><p>5.Pre Steps<br></p>
<p>这里的话构建步骤，可以选择自写一些脚本达到不通的构建目的。此处我有使用到，是为了配合构建回滚使用。</p>
<p>构建回滚这个问题也让我困扰许久看了很多博客都没有成功，其中一篇博客算对我帮助比较大的下面贴一下。</p>
<p><a href="https://www.jianshu.com/p/dceaa1c7bb49" target="_blank" rel="noopener">使用Jenkins进行项目的自动构建部署</a></p>
<p>其中的构建脚本还是有点问题的，后来我问了朋友之后对脚本修改了一下才可用。</p>
<p>我的构建回滚的shell脚本,此处脚本是配合签名Webhook中对参数进行构建的关键:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case $deploy_env in</span><br><span class="line">  deploy)</span><br><span class="line">    echo &quot;deploy:$deploy_env&quot;</span><br><span class="line">    mvn clean test package</span><br><span class="line">    ;;</span><br><span class="line">  rollback)</span><br><span class="line">    echo &quot;rollback:$deploy_env&quot;</span><br><span class="line">    echo &quot;version:$version&quot;</span><br><span class="line">    cd $&#123;WORKSPACE&#125;</span><br><span class="line">    rm -r target</span><br><span class="line">    cp -r $&#123;JENKINS_HOME&#125;/jobs/your task name/builds/$&#123;version&#125;/archive/target $&#123;WORKSPACE&#125;</span><br><span class="line">    pwd &amp;&amp; ls</span><br><span class="line">     ;;</span><br><span class="line">   *)</span><br><span class="line">  	 exit</span><br><span class="line"> 	 ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
<p>6.构建设置</p>
<p>E-mail Notification 勾选可用在构建成功后给你的E-mail发邮件进行通知。这个需要提前在Jenkins系统配置中配置好你的Jenkins邮箱SMTP以及管理员邮箱，注意SMTP配置的邮箱需与管理员邮箱一致。这里也是我踩过的坑，略提一句。</p>
<p>7.构建完成后的操作</p>
<h4 id="这里是我们的最后一步了"><a href="#这里是我们的最后一步了" class="headerlink" title="这里是我们的最后一步了"></a>这里是我们的最后一步了</h4><ul>
<li><p>第一个红框是对构建完成后的项目存档操作以便于后期用于构建回滚操作，非必须。</p>
</li>
<li><p>第二红框为远程部署到Tomcat容器的打包文件类型</p>
</li>
<li><p>第三红框为远程部署到Tomcat容器的打包文件名</p>
</li>
<li><p>第四红框为远程部署到Tomcat容器的账号配置以及远程Tomcat容器的URl管理地址</p>
</li>
</ul>
<p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/jenkins_task_last.png" alt="last"></p>
<p>8.构建或回滚</p>
<h4 id="这里演示的是手动进行构建或回滚操作"><a href="#这里演示的是手动进行构建或回滚操作" class="headerlink" title="这里演示的是手动进行构建或回滚操作"></a>这里演示的是手动进行构建或回滚操作</h4><p><img src="/2018/08/04/Docker-Jenkins-Gogs持续集成自动化部署/jenkins_task_builder.png" alt="builder"></p>
<h2 id="额，基本到这里就结束了吧好久没写博客真的很累￣□￣｜｜，关于Nenux3的使用下次再写。"><a href="#额，基本到这里就结束了吧好久没写博客真的很累￣□￣｜｜，关于Nenux3的使用下次再写。" class="headerlink" title="额，基本到这里就结束了吧好久没写博客真的很累￣□￣｜｜，关于Nenux3的使用下次再写。"></a>额，基本到这里就结束了吧好久没写博客真的很累￣□￣｜｜，关于Nenux3的使用下次再写。</h2>]]></content>
      
        
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
